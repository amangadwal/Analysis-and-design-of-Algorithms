#include <iostream>
#include <vector>
#include <chrono>
#include <algorithm>
#include <random>

using namespace std;
using namespace std::chrono;

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; ++j) {
        if (arr[j] < pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void testQuickSort(int n) {
    vector<int> arr(n);

    // Generate worst case scenario
    for (int i = 0; i < n; ++i) {
        arr[i] = n - i;
    }
    auto start = high_resolution_clock::now();
    quickSort(arr, 0, n - 1);
    auto stop = high_resolution_clock::now();
    auto durationWorst = duration_cast<nanoseconds>(stop - start);

    // Generate average case scenario
    random_device rd;
    mt19937 g(rd());
    shuffle(arr.begin(), arr.end(), g);

    start = high_resolution_clock::now();
    quickSort(arr, 0, n - 1);
    stop = high_resolution_clock::now();
    auto durationAverage = duration_cast<nanoseconds>(stop - start);

    cout << "For n = " << n << ": \n";
    cout << "Worst Case Time: " << durationWorst.count() << " nanoseconds\n";
    cout << "Average Case Time: " << durationAverage.count() << " nanoseconds\n\n";
}

int main() {
    for (int n = 1000; n <= 5000; n += 1000) {
        testQuickSort(n);
    }
    return 0;
}
